/*
 * Identity APIs
 *
 * A List of all identity and account management related APIs. Note: In order to use Bearer token as authentication method, you must include Bearer as a prefix to your token in the Authorize section.   Accepted format is: Bearer <authorization_token>
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapiclient

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// OrganizationManagedOAuthAppsClientsApiService OrganizationManagedOAuthAppsClientsApi service
type OrganizationManagedOAuthAppsClientsApiService service

/*
CreateOrgOAuthAppUsingPOST Create Organization Managed OAuth App
Create Organization Managed OAuth App. The created app will be owned by the organization.&lt;br&gt;Client ID and Client Secret are generated automatically if not provided. Clients can be created with open redirect Urls, using allowOpenRedirectUris &#x3D; true. In this case, the redirectUris field must not be specified. Such clients will allow redirection to any custom url. This feature can only be used in non-production environments. ### Access Policy: | Role | User Accounts | Service Accounts (Client Credentials Applications)  | | ----- | ----- | ---------- | | Organization Owner | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | | Service Owner | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | | Developer | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId Organization ID
 * @param request request
@return ClientIdAndSecretResponse
*/
func (a *OrganizationManagedOAuthAppsClientsApiService) CreateOrgOAuthAppUsingPOST(ctx _context.Context, orgId string, request OrgOAuthAppRequest) (ClientIdAndSecretResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ClientIdAndSecretResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/am/api/orgs/{orgId}/oauth-apps"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.QueryEscape(parameterToString(orgId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &request
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
DeleteOldClientSecretViaOwnerClientRotationUsingDELETE Delete old client secret via client rotation
Once the rotation is done, the new secret will become the client&#39;s only valid secret.&lt;br&gt;&lt;strong&gt;Important:&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;1.The old client secret will be expired after 48 hours.&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;2.Changing the client secret via the client management APIs will reset existing secret rotation (meaning, the provided secret in the management APIs will be the only valid secret).&lt;/strong&gt; ### Access Policy: | Role | User Accounts | Service Accounts (Client Credentials Applications)  | | ----- | ----- | ---------- | | Organization Owner | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | | Service Owner | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | | Developer | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId Organization ID
 * @param oauthAppId Client ID
*/
func (a *OrganizationManagedOAuthAppsClientsApiService) DeleteOldClientSecretViaOwnerClientRotationUsingDELETE(ctx _context.Context, orgId string, oauthAppId string) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/am/api/orgs/{orgId}/oauth-apps/{oauthAppId}/secret"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.QueryEscape(parameterToString(orgId, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"oauthAppId"+"}", _neturl.QueryEscape(parameterToString(oauthAppId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
DeleteOrgOAuthAppsUsingDELETE Delete Organization Managed OAuth Apps
Delete Organization Managed OAuth Apps. &lt;br&gt;Pay attention: in case of partial success the caller must read the response to see which apps haven&#39;t been removed ### Access Policy: | Role | User Accounts | Service Accounts (Client Credentials Applications)  | | ----- | ----- | ---------- | | Organization Owner | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | | Service Owner | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | | Developer | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId Organization ID
 * @param request request
@return PartialSuccessResponseOfstring
*/
func (a *OrganizationManagedOAuthAppsClientsApiService) DeleteOrgOAuthAppsUsingDELETE(ctx _context.Context, orgId string, request DeleteClientsRequest) (PartialSuccessResponseOfstring, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PartialSuccessResponseOfstring
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/am/api/orgs/{orgId}/oauth-apps"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.QueryEscape(parameterToString(orgId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &request
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetAllOrgOAuthAppsUsingGETOpts Optional parameters for the method 'GetAllOrgOAuthAppsUsingGET'
type GetAllOrgOAuthAppsUsingGETOpts struct {
    PageStart optional.Int32
    PageLimit optional.Int32
    SearchTerm optional.String
}

/*
GetAllOrgOAuthAppsUsingGET Get All Organization Managed OAuth Apps
Get all Organization Managed OAuth Apps that were created and are owned by the organization. Default start index is 0, default page size is 15. ### Access Policy: | Role | User Accounts | Service Accounts (Client Credentials Applications)  | | ----- | ----- | ---------- | | Organization Owner | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | | Service Owner | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | | Developer | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId Organization ID
 * @param optional nil or *GetAllOrgOAuthAppsUsingGETOpts - Optional Parameters:
 * @param "PageStart" (optional.Int32) -  Start index
 * @param "PageLimit" (optional.Int32) -  Page size
 * @param "SearchTerm" (optional.String) -  A search term to be used to filter OAuth apps by either display name or client id
@return PagedResponseOfOrgOAuthAppResponse
*/
func (a *OrganizationManagedOAuthAppsClientsApiService) GetAllOrgOAuthAppsUsingGET(ctx _context.Context, orgId string, localVarOptionals *GetAllOrgOAuthAppsUsingGETOpts) (PagedResponseOfOrgOAuthAppResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PagedResponseOfOrgOAuthAppResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/am/api/orgs/{orgId}/oauth-apps"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.QueryEscape(parameterToString(orgId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.PageStart.IsSet() {
		localVarQueryParams.Add("pageStart", parameterToString(localVarOptionals.PageStart.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageLimit.IsSet() {
		localVarQueryParams.Add("pageLimit", parameterToString(localVarOptionals.PageLimit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchTerm.IsSet() {
		localVarQueryParams.Add("searchTerm", parameterToString(localVarOptionals.SearchTerm.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetOrgOAuthAppUsingGET Get Organization Managed OAuth App
Get Organization Managed OAuth App that was created and is owned by the organization ### Access Policy: | Role | User Accounts | Service Accounts (Client Credentials Applications)  | | ----- | ----- | ---------- | | Organization Owner | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | | Service Owner | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | | Developer | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId Organization ID
 * @param oauthAppId App ID
@return OrgOAuthAppResponse
*/
func (a *OrganizationManagedOAuthAppsClientsApiService) GetOrgOAuthAppUsingGET(ctx _context.Context, orgId string, oauthAppId string) (OrgOAuthAppResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  OrgOAuthAppResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/am/api/orgs/{orgId}/oauth-apps/{oauthAppId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.QueryEscape(parameterToString(orgId, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"oauthAppId"+"}", _neturl.QueryEscape(parameterToString(oauthAppId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
SetNewClientSecretViaOwnerClientRotationUsingPOST Sets a new client secret for the given client via client rotation
Once a &#39;newClientSecret&#39; is set, both the old and the new secret can be used.&lt;br&gt;&lt;strong&gt;Important:&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;1.The old client secret will be expired after 48 hours.&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;2.Changing the client secret via the client management APIs will reset existing secret rotation (meaning, the provided secret in the management APIs will be the only valid secret).&lt;/strong&gt; ### Access Policy: | Role | User Accounts | Service Accounts (Client Credentials Applications)  | | ----- | ----- | ---------- | | Organization Owner | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | | Service Owner | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | | Developer | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId Organization ID
 * @param oauthAppId Client ID
 * @param clientSecretOwnerRotationRequest clientSecretOwnerRotationRequest
*/
func (a *OrganizationManagedOAuthAppsClientsApiService) SetNewClientSecretViaOwnerClientRotationUsingPOST(ctx _context.Context, orgId string, oauthAppId string, clientSecretOwnerRotationRequest ClientSecretOwnerRotationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/am/api/orgs/{orgId}/oauth-apps/{oauthAppId}/secret"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.QueryEscape(parameterToString(orgId, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"oauthAppId"+"}", _neturl.QueryEscape(parameterToString(oauthAppId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &clientSecretOwnerRotationRequest
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
UpdateOrgOAuthAppSecretUsingPUT Regenerate Organization OAuth App Secret
Regenerate Organization Managed OAuth App Secret An empty JSON body {} is required in order to invoke the API. &lt;br&gt;&lt;strong&gt;Important:&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;2.Changing the client secret via the client management APIs will reset existing secret rotation (meaning, the provided secret in the management APIs will be the only valid secret).&lt;/strong&gt; ### Access Policy: | Role | User Accounts | Service Accounts (Client Credentials Applications)  | | ----- | ----- | ---------- | | Organization Owner | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | | Service Owner | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | | Developer | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId Organization ID
 * @param oauthAppId Client ID
@return ClientIdAndSecretResponse
*/
func (a *OrganizationManagedOAuthAppsClientsApiService) UpdateOrgOAuthAppSecretUsingPUT(ctx _context.Context, orgId string, oauthAppId string) (ClientIdAndSecretResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ClientIdAndSecretResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/am/api/orgs/{orgId}/oauth-apps/{oauthAppId}/secret"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.QueryEscape(parameterToString(orgId, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"oauthAppId"+"}", _neturl.QueryEscape(parameterToString(oauthAppId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
UpdateOrgOAuthAppUsingPATCH Update Organization Managed OAuth App
Update Organization Managed OAuth App that was created and is owned by the organization&lt;br&gt;&lt;strong&gt;Important:&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;2.Changing the client secret via the client management APIs will reset existing secret rotation (meaning, the provided secret in the management APIs will be the only valid secret).&lt;/strong&gt; ### Access Policy: | Role | User Accounts | Service Accounts (Client Credentials Applications)  | | ----- | ----- | ---------- | | Organization Owner | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | | Service Owner | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | | Developer | &amp;#x2714;&amp;#xFE0F; | &amp;#x2714;&amp;#xFE0F; | 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId Organization ID
 * @param oauthAppId Client ID
 * @param request request
@return OrgOAuthAppResponse
*/
func (a *OrganizationManagedOAuthAppsClientsApiService) UpdateOrgOAuthAppUsingPATCH(ctx _context.Context, orgId string, oauthAppId string, request OrgOAuthAppUpdateRequest) (OrgOAuthAppResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  OrgOAuthAppResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/am/api/orgs/{orgId}/oauth-apps/{oauthAppId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.QueryEscape(parameterToString(orgId, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"oauthAppId"+"}", _neturl.QueryEscape(parameterToString(oauthAppId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &request
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
